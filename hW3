class Bank:
    def __init__(self, name, balance):
        self._name = name
        self._balance = balance

    def moneyX(self):
        additional_money = float(input("Введите сумму для добавления на счет: "))
        self._balance += additional_money
        print(f"Текущий баланс после добавления: {self._balance}")

    def _kill(self):
        self._balance = 0
        print("Баланс обнулен")

    def _jackpot(self):
        self._balance *= 10
        print("Джекпот! Баланс увеличен в 10 раз")

    def _merge_balance(self, other_account):
        self._balance += other_account._balance
        other_account._balance = 0
        print(f"Баланс объединен. Текущий баланс: {self._balance}")

# Пример использования методов
account1 = Bank("John's Account", 100)
account2 = Bank("Alice's Account", 100)

account1.moneyX()
account1._jackpot()  # Этот метод скрытый, но может быть вызван изнутри класса
account1._merge_balance(account2)  # Этот метод также скрытый

print(f"{account1._name}'s balance: {account1._balance}")
print(f"{account2._name}'s balance: {account2._balance}")

class Calculator:
    def __init__(self, value):
        self.value = value

    def __add__(self, other):
        return self.value + other.value

    def __sub__(self, other):
        return self.value - other.value

    def __mul__(self, other):
        return self.value * other.value

    def __truediv__(self, other):
        if other.value != 0:
            return self.value / other.value
        else:
            return "Ошибка: деление на ноль"

# Пример использования калькулятора
num1 = Calculator(10)
num2 = Calculator(5)

result_add = num1 + num2
result_sub = num1 - num2
result_mul = num1 * num2
result_div = num1 / num2

print(f"Сложение: {result_add}")
print(f"Вычитание: {result_sub}")
print(f"Умножение: {result_mul}")
print(f"Деление: {result_div}")